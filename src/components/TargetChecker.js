import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import './TargetChecker.css';

const TargetChecker = () => {
  const [target, setTarget] = useState('');
  const [selectedTaskType, setSelectedTaskType] = useState('');
  const [showDropdown, setShowDropdown] = useState(false);
  const [showBurgerMenu, setShowBurgerMenu] = useState(false);
  const [agentData, setAgentData] = useState({
    name: '',
    email: '',
    desc: ''
  });
  const [inputVisible, setInputVisible] = useState(false);
  const [containerVisible, setContainerVisible] = useState(false);
  const [currentSlide, setCurrentSlide] = useState(0);
  const [agentCount, setAgentCount] = useState(0);
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState(null);
  const [copied, setCopied] = useState(false);
  const [checkStartTime, setCheckStartTime] = useState(null);
  const [agentsLoading, setAgentsLoading] = useState(false);
  const [port, setPort] = useState('');

  const dropdownRef = useRef(null);
  const burgerRef = useRef(null);
  const carouselTrackRef = useRef(null);
  const wsRef = useRef(null);
  const reconnectTimeoutRef = useRef(null);

  const API_URL = 'https://checkpulse.ru/api';
  const WS_URL = 'wss://checkpulse.ru/ws';

  const initialTargets = ['yandex.ru', 'vk.com', 'ok.com', 'tremolino.ru', 'auto.ru'];

  const [targetsData, setTargetsData] = useState(
    initialTargets.map(name => ({ name, time: '‚Äî', status: 'pending' }))
  );

  const taskTypes = [
    { value: 'ping', label: 'PING' },
    { value: 'dns', label: 'DNS' },
    { value: 'http', label: 'HTTP' },
    { value: 'traceroute', label: 'TRACEROUTE' },
    { value: 'tcp', label: 'TCP' },
    { value: 'full', label: 'FULL' }
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket
  const connectWebSocket = () => {
    try {
      console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket /ws/onlineag...');
      
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }

      if (wsRef.current) {
        wsRef.current.close();
      }

      const ws = new WebSocket(`${WS_URL}/onlineag`);
      
      ws.onopen = () => {
        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ /ws/onlineag');
        setAgentsLoading(false);
        
        ws.send(JSON.stringify({ 
          action: 'get_online_count',
          type: 'online_agents'
        }));
      };

      ws.onmessage = (event) => {
        try {
          console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
          
          let data;
          try {
            data = JSON.parse(event.data);
          } catch (parseError) {
            console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:', event.data);
            const count = parseInt(event.data);
            if (!isNaN(count)) {
              data = count;
            } else if (typeof event.data === 'string') {
              const match = event.data.match(/\d+/);
              if (match) {
                data = parseInt(match[0]);
              } else {
                throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ WebSocket');
              }
            } else {
              throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ WebSocket');
            }
          }
          
          let count = 0;
          
          if (typeof data === 'number') {
            count = data;
          } else if (data && typeof data === 'object') {
            if (data.online_count !== undefined) {
              count = data.online_count;
            } else if (data.count !== undefined) {
              count = data.count;
            } else if (data.total !== undefined) {
              count = data.total;
            } else if (data.online !== undefined) {
              count = data.online;
            } else if (data.agents !== undefined) {
              if (Array.isArray(data.agents)) {
                count = data.agents.length;
              } else if (typeof data.agents === 'number') {
                count = data.agents;
              }
            } else if (data.message && typeof data.message === 'number') {
              count = data.message;
            } else {
              const values = Object.values(data).filter(val => typeof val === 'number');
              if (values.length > 0) {
                count = values[0];
              }
            }
          }
          
          console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –∞–≥–µ–Ω—Ç–æ–≤: ${count}`);
          setAgentCount(count);
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
          fetchAgentCountHTTP();
        }
      };

      ws.onerror = (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
        setAgentsLoading(false);
        fetchAgentCountHTTP();
      };

      ws.onclose = (event) => {
        console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason);
        setAgentsLoading(false);
        
        if (event.code !== 1000) {
          console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º WebSocket —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
          reconnectTimeoutRef.current = setTimeout(() => {
            connectWebSocket();
          }, 5000);
        }
      };

      wsRef.current = ws;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
      setAgentsLoading(false);
      fetchAgentCountHTTP();
    }
  };

  // Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≥–µ–Ω—Ç–æ–≤
  const fetchAgentCountHTTP = async () => {
    try {
      console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ HTTP...');
      const response = await axios.get(`${API_URL}/agents`, {
        timeout: 5000
      });
      
      let count = 0;
      
      if (Array.isArray(response.data)) {
        count = response.data.length;
      } else if (response.data && typeof response.data === 'object') {
        if (response.data.count !== undefined) {
          count = response.data.count;
        } else if (response.data.agents !== undefined) {
          if (Array.isArray(response.data.agents)) {
            count = response.data.agents.length;
          } else if (typeof response.data.agents === 'number') {
            count = response.data.agents;
          }
        } else if (response.data.total !== undefined) {
          count = response.data.total;
        } else {
          count = Object.keys(response.data).length;
        }
      }
      
      console.log(`üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ HTTP: ${count}`);
      setAgentCount(count);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ HTTP:', error);
      console.log('‚ö†Ô∏è –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞:', agentCount);
    } finally {
      setAgentsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
  const refreshAgentCount = () => {
    setAgentsLoading(true);
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–Ω–ª–∞–π–Ω –∞–≥–µ–Ω—Ç–æ–≤...');
    
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({ 
        action: 'get_online_count',
        type: 'online_agents',
        refresh: true 
      }));
    } else {
      connectWebSocket();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket
  const closeWebSocket = () => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
    }
    
    if (wsRef.current) {
      wsRef.current.close(1000, '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');
      wsRef.current = null;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const formatResultData = (data) => {
    if (!data) return '';
    
    if (typeof data === 'string') {
      return data;
    }
    
    if (data.output && typeof data.output === 'string') {
      return data.output;
    }
    
    if (data.data && typeof data.data === 'string') {
      return data.data;
    }
    
    return JSON.stringify(data, null, 2);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const handleCopy = (text) => {
    navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const performCheck = async (targetName, type = 'ping', customPort = null) => {
    try {
      console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ${type} –¥–ª—è ${targetName}...`);

      const data = type === 'tcp' 
        ? { 
            target: targetName, 
            type: type,
            port: parseInt(customPort)
          }
        : { 
            target: targetName, 
            type: type 
          };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);

      // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
      const taskRes = await axios.post(`${API_URL}/checks`, data);
      console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:', taskRes.data);
      
      const taskId = taskRes.data.id;
      console.log('üÜî ID –∑–∞–¥–∞—á–∏:', taskId);

      // 2. –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const maxAttempts = 15;
      let finalResult;

      for (let attempt = 0; attempt < maxAttempts; attempt++) {
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        try {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxAttempts} –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...`);
          const resultRes = await axios.get(`${API_URL}/checks/${taskId}`);
          finalResult = resultRes.data;
          
          console.log(`üìä –°—Ç–∞—Ç—É—Å –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt + 1}:`, finalResult.status);
          console.log(`üìã –î–∞–Ω–Ω—ã–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt + 1}:`, finalResult);

          if (finalResult.status !== 'pending' && finalResult.status !== 'queued') {
            console.log('üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            break;
          }
          
          if (attempt === maxAttempts - 1) {
            console.log('‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
            finalResult = { 
              ...finalResult, 
              status: 'timeout', 
              error: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏' 
            };
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error);
        }
      }

      console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', finalResult);
      return finalResult;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${targetName}:`, error);
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      return {
        status: 'error',
        error: error.response?.data?.detail || error.response?.data?.message || error.message,
        http_status: error.response?.status
      };
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∏–Ω–≥–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
  const getPing = async (targetName) => {
    try {
      const result = await performCheck(targetName, 'ping');
      
      let timeStr = '>99 –º—Å';
      let status = 'bad';

      if (result.status === 'ok' || result.status === 'completed' || result.status === 'success') {
        const rawData = result.data;
        let pingTime = null;

        if (result.response_time) {
          pingTime = result.response_time * 1000;
        } else if (rawData) {
          const output = formatResultData(rawData);
          const patterns = [
            /time=([\d.]+)\s*ms/i,
            /time[=:\s]+([\d.]+)\s*ms/i,
            /–≤—Ä–µ–º—è[=:\s]+([\d.]+)\s*–º—Å/i,
            /([\d.]+)\s*ms/i
          ];
          
          for (const pattern of patterns) {
            const match = output.match(pattern);
            if (match) {
              pingTime = parseFloat(match[1]);
              break;
            }
          }
        }

        if (pingTime !== null) {
          timeStr = pingTime > 99 ? '>99 –º—Å' : `${pingTime.toFixed(1)} –º—Å`;
          status = pingTime < 100 ? 'ok' : 'bad';
        } else {
          timeStr = '‚Äî';
          status = 'ok';
        }
      } else if (result.status === 'fail' || result.status === 'error') {
        status = 'bad';
        timeStr = '‚Äî';
      }

      return { name: targetName, time: timeStr, status, rawResult: result };
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ –¥–ª—è ${targetName}:`, error);
      return { name: targetName, time: '‚Äî', status: 'bad' };
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏–Ω–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
  const fetchPings = async () => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–Ω–≥–∏ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é...');
      const promises = initialTargets.map(name => getPing(name));
      const newData = await Promise.all(promises);
      setTargetsData(newData);
      console.log('‚úÖ –ü–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', newData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∏–Ω–≥–æ–≤:', error);
    }
  };

  // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∫ —É ping
  const formatCheckResult = (result, type) => {
    if (!result) return { time: '‚Äî', status: 'pending' };

    let timeStr = '‚Äî';
    let status = 'pending';

    if (result.status === 'ok' || result.status === 'completed' || result.status === 'success') {
      status = 'ok';
      
      // –î–ª—è ping –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
      if (type === 'ping') {
        const rawData = result.data;
        let pingTime = null;

        if (result.response_time) {
          pingTime = result.response_time * 1000;
        } else if (rawData) {
          const output = formatResultData(rawData);
          const patterns = [
            /time=([\d.]+)\s*ms/i,
            /time[=:\s]+([\d.]+)\s*ms/i,
            /–≤—Ä–µ–º—è[=:\s]+([\d.]+)\s*–º—Å/i,
            /([\d.]+)\s*ms/i
          ];
          
          for (const pattern of patterns) {
            const match = output.match(pattern);
            if (match) {
              pingTime = parseFloat(match[1]);
              break;
            }
          }
        }

        if (pingTime !== null) {
          timeStr = pingTime > 99 ? '>99 –º—Å' : `${pingTime.toFixed(1)} –º—Å`;
          status = pingTime < 100 ? 'ok' : 'bad';
        }
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        const responseTime = result.response_time || result.client_response_time;
        if (responseTime) {
          timeStr = `${(responseTime * 1000).toFixed(1)} –º—Å`;
        } else {
          timeStr = 'OK';
        }
      }
    } else if (result.status === 'fail' || result.status === 'error' || result.status === 'timeout') {
      status = 'bad';
      timeStr = '‚Äî';
    }

    return { time: timeStr, status };
  };

  useEffect(() => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–Ω–ª–∞–π–Ω –∞–≥–µ–Ω—Ç–æ–≤
    setAgentsLoading(true);
    connectWebSocket();
    
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setShowDropdown(false);
      }
      if (burgerRef.current && !burgerRef.current.contains(event.target)) {
        setShowBurgerMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    fetchPings();

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏–Ω–≥–æ–≤ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    const pingIntervalId = setInterval(fetchPings, 60000);

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      clearInterval(pingIntervalId);
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º WebSocket –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      closeWebSocket();
    };
  }, []);

  useEffect(() => {
    const containerTimer = setTimeout(() => {
      setContainerVisible(true);
    }, 100);
    
    const inputTimer = setTimeout(() => {
      setInputVisible(true);
    }, 300);
    
    return () => {
      clearTimeout(containerTimer);
      clearTimeout(inputTimer);
    };
  }, []);

  useEffect(() => {
    if (carouselTrackRef.current) {
      carouselTrackRef.current.style.transform = `translateX(-${currentSlide * 100}%)`;
    }
  }, [currentSlide]);

  const handleCheck = async (e) => {
    e.preventDefault();
    
    if (!target.trim() || !selectedTaskType) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏');
      return;
    }

    if (selectedTaskType === 'tcp' && !port.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è TCP –ø—Ä–æ–≤–µ—Ä–∫–∏');
      return;
    }

    setLoading(true);
    setResults(null);
    const startTime = Date.now();
    setCheckStartTime(startTime);
    
    try {
      const result = await performCheck(
        target, 
        selectedTaskType, 
        selectedTaskType === 'tcp' ? port : null
      );

      const endTime = Date.now();
      const clientResponseTime = (endTime - startTime) / 1000;
      
      const finalResult = {
        ...result,
        client_response_time: clientResponseTime
      };

      console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', finalResult);
      console.log('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–ª–∏–µ–Ω—Ç):', clientResponseTime, '—Å–µ–∫');
      
      setResults(finalResult);
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', error);
      const errorMessage = error.response?.data?.detail || error.response?.data?.message || error.message;
      alert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
    } finally {
      setLoading(false);
      setCheckStartTime(null);
    }
  };

  const handleTaskTypeSelect = (type) => {
    setSelectedTaskType(type);
    setShowDropdown(false);
    if (type !== 'tcp') {
      setPort('');
    }
  };

  const handleDropdownToggle = () => {
    setShowDropdown(!showDropdown);
  };

  const handleBurgerToggle = () => {
    setShowBurgerMenu(!showBurgerMenu);
  };

  const handleAgentInputChange = (e) => {
    const { name, value } = e.target;
    setAgentData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleAgentSubmit = async (e) => {
    e.preventDefault();
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞:', agentData);
      
      const response = await axios.post(`${API_URL}/agents/register`, agentData);
      console.log('‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', response.data);
      
      setAgentData({
        name: '',
        email: '',
        desc: ''
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
      refreshAgentCount();
      
      alert('–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! API –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É.');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:', error);
      const errorMessage = error.response?.data?.detail || error.response?.data?.message || error.message;
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: ${errorMessage}`);
    }
  };

  const handleAgentCancel = () => {
    setAgentData({
      name: '',
      email: '',
      desc: ''
    });
  };

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev === targetsData.length - 1 ? 0 : prev + 1));
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev === 0 ? targetsData.length - 1 : prev - 1));
  };

  const goToSlide = (index) => {
    setCurrentSlide(index);
  };

  const isAgentFormValid = agentData.name.trim() && 
                          agentData.email.trim() && 
                          agentData.desc.trim();

  const getSelectedTaskLabel = () => {
    const task = taskTypes.find(t => t.value === selectedTaskType);
    return task ? task.label : '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏';
  };

  const renderResults = () => {
  if (!results) return null;

  console.log('üìä –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', results);

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∏–ª–µ ping
  const formattedResult = formatCheckResult(results, selectedTaskType);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è JSON –¥–∞–Ω–Ω—ã—Ö
  const renderJSONData = () => {
    // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–∞—Ö
    const jsonData = results.data || results.output || results.result || results;
    
    if (!jsonData) {
      return null;
    }

    let formattedJSON = '';
    
    try {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å—Ç—Ä–æ–∫–∏, –ø–∞—Ä—Å–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
      if (typeof jsonData === 'string') {
        try {
          const parsed = JSON.parse(jsonData);
          formattedJSON = JSON.stringify(parsed, null, 2);
        } catch (e) {
          // –ï—Å–ª–∏ –Ω–µ JSON, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
          formattedJSON = jsonData;
        }
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ JSON
        formattedJSON = JSON.stringify(jsonData, null, 2);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON:', error);
      formattedJSON = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
    }

    return (
      <div className="result-section">
        <div className="section-header">
          <span className="section-icon">üîß</span>
          JSON –¥–∞–Ω–Ω—ã–µ
        </div>
        <div className="json-data-container">
          <div className="json-header">
            <span className="json-title">–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:</span>
            <button 
              className={`copy-btn ${copied ? 'copied' : ''}`}
              onClick={() => handleCopy(formattedJSON)}
            >
              {copied ? '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å JSON'}
            </button>
          </div>
          <pre className="json-output">{formattedJSON}</pre>
        </div>
      </div>
    );
  };

  return (
    <div className="results-wrapper">
      <div className="results-container">
        <div className="results-header">
          <div className="results-title">
            <span className="results-icon">üìä</span>
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ {selectedTaskType.toUpperCase()}
          </div>
          <div className="results-timestamp">
            {new Date().toLocaleTimeString('ru-RU')}
          </div>
        </div>

        <div className="results-content">
          {/* –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å—Ç–∏–ª–µ ping */}
          <div className="result-section">
            <div className="section-header">
              <span className="section-icon">üéØ</span>
              –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
            </div>
            <div className="ping-result">
              <div className="ping-target">{target}</div>
              <div className="ping-info">
                <span className={`ping-time ${formattedResult.status}`}>
                  {formattedResult.time}
                </span>
                <span className={`ping-status ${formattedResult.status}`}>
                  {formattedResult.status === 'ok' ? 'OK' : 'BAD'}
                </span>
              </div>
            </div>
          </div>

          {/* –û—à–∏–±–∫–∞ */}
          {results.error && (
            <div className="result-section">
              <div className="section-header">
                <span className="section-icon">üö®</span>
                –û—à–∏–±–∫–∞
              </div>
              <div className="error-message">
                {results.error}
              </div>
            </div>
          )}

          {/* –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
          {(results.response_time || results.client_response_time) && (
            <div className="result-section">
              <div className="section-header">
                <span className="section-icon">‚è±Ô∏è</span>
                –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
              </div>
              <div className="time-info">
                <div className="time-item">
                  <span className="time-label">–û–±—â–µ–µ –≤—Ä–µ–º—è:</span>
                  <span className="time-value">
                    {((results.response_time || results.client_response_time) * 1000).toFixed(1)} –º—Å
                  </span>
                </div>
                {results.response_time && (
                  <div className="time-item">
                    <span className="time-label">–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:</span>
                    <span className="time-value">{results.response_time.toFixed(3)} —Å–µ–∫</span>
                  </div>
                )}
                {results.client_response_time && (
                  <div className="time-item">
                    <span className="time-label">–í—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç–∞:</span>
                    <span className="time-value">{results.client_response_time.toFixed(3)} —Å–µ–∫</span>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* JSON –¥–∞–Ω–Ω—ã–µ */}
          {renderJSONData()}

          {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ */}
          <div className="result-section">
            <div className="section-header">
              <span className="section-icon">üìã</span>
              –î–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            </div>
            <div className="result-details">
              <div className="detail-item">
                <span className="detail-label">–°—Ç–∞—Ç—É—Å:</span>
                <span className={`detail-value ${results.status}`}>
                  {results.status}
                </span>
              </div>
              {results.id && (
                <div className="detail-item">
                  <span className="detail-label">ID –∑–∞–¥–∞—á–∏:</span>
                  <span className="detail-value">{results.id}</span>
                </div>
              )}
              <div className="detail-item">
                <span className="detail-label">–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏:</span>
                <span className="detail-value">{selectedTaskType}</span>
              </div>
              {results.created_at && (
                <div className="detail-item">
                  <span className="detail-label">–°–æ–∑–¥–∞–Ω–æ:</span>
                  <span className="detail-value">{new Date(results.created_at).toLocaleString('ru-RU')}</span>
                </div>
              )}
              {results.updated_at && (
                <div className="detail-item">
                  <span className="detail-label">–û–±–Ω–æ–≤–ª–µ–Ω–æ:</span>
                  <span className="detail-value">{new Date(results.updated_at).toLocaleString('ru-RU')}</span>
                </div>
              )}
            </div>
          </div>

          {/* –°–≤–æ–¥–∫–∞ */}
          <div className="results-summary">
            <div className="summary-item">
              <div className="summary-label">–¶–µ–ª—å</div>
              <div className="summary-value">{target}</div>
            </div>
            <div className="summary-item">
              <div className="summary-label">–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏</div>
              <div className="summary-value">{getSelectedTaskLabel()}</div>
            </div>
            {selectedTaskType === 'tcp' && port && (
              <div className="summary-item">
                <div className="summary-label">–ü–æ—Ä—Ç</div>
                <div className="summary-value">{port}</div>
              </div>
            )}
            <div className="summary-item">
              <div className="summary-label">–°—Ç–∞—Ç—É—Å</div>
              <div className={`summary-value ${formattedResult.status}`}>
                {formattedResult.status === 'ok' ? 'OK' : 'BAD'}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
  return (
    <div className="target-checker">
      {/* –ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é */}
      <div className="burger-menu" ref={burgerRef}>
        <button 
          className="burger-toggle"
          onClick={handleBurgerToggle}
        >
          ‚ò∞
        </button>
        <div className={`burger-dropdown ${showBurgerMenu ? 'visible' : ''}`}>
          <div className="burger-links">
            <a 
              href="/admin"
              className="burger-link"
              onClick={() => setShowBurgerMenu(false)}
            >
              <span>‚öôÔ∏è</span>
              –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            </a>
            <a 
              href="https://t.me/checkpulse_aeza_bot" 
              target="_blank" 
              rel="noopener noreferrer" 
              className="burger-link"
              onClick={() => setShowBurgerMenu(false)}
            >
              <span>üì°</span>
              –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
            </a>
            <a 
              href="https://docs.your-project.com" 
              target="_blank" 
              rel="noopener noreferrer" 
              className="burger-link"
              onClick={() => setShowBurgerMenu(false)}
            >
              <span>üìö</span>
              –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            </a>
            <a 
              href="https://github.com/your-username" 
              target="_blank" 
              rel="noopener noreferrer" 
              className="burger-link"
              onClick={() => setShowBurgerMenu(false)}
            >
              <span>üíª</span>
              GitHub
            </a>
            <a 
              href="https://sourcecraft.com" 
              target="_blank" 
              rel="noopener noreferrer" 
              className="burger-link"
              onClick={() => setShowBurgerMenu(false)}
            >
              <span>üõ†Ô∏è</span>
              SourceCraft
            </a>
          </div>
          <div className="burger-contact">
            –ö–æ–Ω—Ç–∞–∫—Ç—ã:<br />
            support@your-domain.com<br />
            +7 (XXX) XXX-XX-XX
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å-–∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ */}
      <div className="status-bar">
        {targetsData.map((item, index) => (
          <div key={index} className={`status-card ${item.status}`}>
            <div className="target">{item.name}</div>
            <div className="info-row">
              <span className="ping">{item.time}</span>
              <span className={`status ${item.status}`}>
                {item.status === 'ok' ? 'OK' : 'BAD'}
              </span>
            </div>
          </div>
        ))}
      </div>

      {/* –ö–∞—Ä—É—Å–µ–ª—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
      <div className="status-carousel">
        <div className="status-carousel-track" ref={carouselTrackRef}>
          {targetsData.map((item, index) => (
            <div key={index} className={`status-card ${item.status}`}>
              <div className="target">{item.name}</div>
              <div className="info-row">
                <span className="ping">{item.time}</span>
                <span className={`status ${item.status}`}>
                  {item.status === 'ok' ? 'OK' : 'BAD'}
                </span>
              </div>
            </div>
          ))}
        </div>
        <button className="carousel-button prev" onClick={prevSlide}>
          ‚Äπ
        </button>
        <button className="carousel-button next" onClick={nextSlide}>
          ‚Ä∫
        </button>
        <div className="carousel-indicators">
          {targetsData.map((_, index) => (
            <div
              key={index}
              className={`carousel-indicator ${currentSlide === index ? 'active' : ''}`}
              onClick={() => goToSlide(index)}
            />
          ))}
        </div>
      </div>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏ */}
      <input
        type="text"
        className={`target-input ${inputVisible ? 'visible' : ''}`}
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å (–¥–æ–º–µ–Ω –∏–ª–∏ IP –∞–¥—Ä–µ—Å)"
        value={target}
        onChange={(e) => setTarget(e.target.value)}
      />

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è TCP) */}
      {selectedTaskType === 'tcp' && (
        <input
          type="number"
          className={`target-input port-input ${inputVisible ? 'visible' : ''}`}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 80, 443, 22...)"
          value={port}
          onChange={(e) => setPort(e.target.value)}
          min="1"
          max="65535"
        />
      )}

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ç–∏–ø–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
      <div className="check-container">
        {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
        <div className="check-button-container">
          <div 
            className={`check-button compact ${loading ? 'loading' : ''}`}
            onClick={handleCheck}
            disabled={loading || !target || !selectedTaskType || (selectedTaskType === 'tcp' && !port)}
          >
            {loading ? '‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'}
          </div>
        </div>

        {/* –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
        <div className="check-type-wrapper" ref={dropdownRef}>
          <div className="check-type-header">–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏</div>
          <div className="task-type-container compact">
            <div 
              className="task-type-toggle compact"
              onClick={handleDropdownToggle}
            >
              {getSelectedTaskLabel()}
            </div>
            <div className={`dropdown-menu ${showDropdown ? 'visible' : ''}`}>
              <button 
                className="dropdown-close"
                onClick={() => setShowDropdown(false)}
                aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"
              >
                √ó
              </button>
              <div className="dropdown-header">
                <div className="dropdown-title">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏</div>
              </div>
              <div className="task-types-grid">
                {taskTypes.map((type) => (
                  <div
                    key={type.value}
                    className={`task-type ${selectedTaskType === type.value ? 'selected' : ''}`}
                    onClick={() => handleTaskTypeSelect(type.value)}
                  >
                    {type.label}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
      {renderResults()}

      {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ—Ä–º—ã –∞–≥–µ–Ω—Ç–∞ */}
      <div className={`agent-check-container ${containerVisible ? 'visible' : ''}`}>
        {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ */}
        <div className="agent-form-compact">
          <div className="agent-form-container permanent">
            <div className="agent-form-content">
              <form className="agent-form permanent" onSubmit={handleAgentSubmit}>
                <div className="form-title">–î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞</div>
                <div className="form-row">
                  <input
                    type="text"
                    name="name"
                    placeholder="–ò–º—è –∞–≥–µ–Ω—Ç–∞"
                    value={agentData.name}
                    onChange={handleAgentInputChange}
                    className="form-input"
                  />
                </div>
                <div className="form-row">
                  <input
                    type="email"
                    name="email"
                    placeholder="–í–∞—à–∞ –ø–æ—á—Ç–∞"
                    value={agentData.email}
                    onChange={handleAgentInputChange}
                    className="form-input"
                  />
                </div>
                <div className="form-row">
                  <textarea
                    name="desc"
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
                    value={agentData.desc}
                    onChange={handleAgentInputChange}
                    className="form-textarea"
                  />
                </div>
                <div className="form-buttons">
                  <button 
                    type="submit" 
                    className={`submit-agent-btn ${isAgentFormValid ? 'active' : ''}`}
                    disabled={!isAgentFormValid}
                  >
                    –°–æ–∑–¥–∞—Ç—å
                  </button>
                  <button 
                    type="button" 
                    className="cancel-agent-btn"
                    onClick={handleAgentCancel}
                  >
                    –û—Ç–º–µ–Ω–∏—Ç—å
                  </button>
                </div>
              </form>
            </div>  
          </div>
        </div>
      </div>

      {/* –°—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω –∞–≥–µ–Ω—Ç–æ–≤ */}
      <div className="agent-counter">
        <div className="counter-label">–û–Ω–ª–∞–π–Ω –∞–≥–µ–Ω—Ç—ã</div>
        <div className={`counter-value ${agentsLoading ? 'loading' : ''}`}>
          {agentsLoading ? '...' : agentCount}
        </div>

      </div>
    </div>
  );
};

export default TargetChecker;