// src/components/AdminPanel.js
import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../hooks/useAuth';
import './AdminPanel.css';

const AdminPanel = () => {
  const [agents, setAgents] = useState([]);
  const [showBurgerMenu, setShowBurgerMenu] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  
  const { createAuthApi, logout, isAuthenticated } = useAuth();

  const fetchAgents = useCallback(async () => {
    const authApi = createAuthApi();
    
    try {
      setLoading(true);
      setError('');
      console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤...');
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
      let response;
      try {
        // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        response = await authApi.get('/admin');
      } catch (adminError) {
        console.log('‚ùå /admin –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º /agents...');
        try {
          // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
          response = await authApi.get('/agents');
        } catch (agentsError) {
          console.log('‚ùå /agents –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º /api/agents...');
          try {
            response = await authApi.get('/api/agents');
          } catch (apiAgentsError) {
            console.log('‚ùå –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
            throw new Error('–í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
          }
        }
      }
      
      console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
      
      let agentsData = [];
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
      if (Array.isArray(response.data)) {
        agentsData = response.data;
      } else if (response.data.agents && Array.isArray(response.data.agents)) {
        agentsData = response.data.agents;
      } else if (response.data.data && Array.isArray(response.data.data)) {
        agentsData = response.data.data;
      } else if (typeof response.data === 'object') {
        agentsData = Object.values(response.data);
      }
      
      const formattedAgents = agentsData.map((agent, index) => ({
        id: agent.id || agent._id || `agent-${index + 1}`,
        name: agent.name || agent.hostname || `–ê–≥–µ–Ω—Ç ${index + 1}`,
        email: agent.email || agent.contact || 'email@example.com',
        desc: agent.desc || agent.description || agent.purpose || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        status: agent.status || agent.state || 'active',
        lastActive: agent.last_active || agent.lastActive || agent.last_seen || new Date().toISOString(),
        created: agent.created_at || agent.created || agent.registered || new Date().toISOString().split('T')[0],
        ip: agent.ip || agent.address || `192.168.1.${index + 1}`,
        version: agent.version || '1.0.0'
      }));
      
      setAgents(formattedAgents);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≥–µ–Ω—Ç–æ–≤:', error);
      
      if (error.response?.status === 401) {
        setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.');
        logout();
      } else if (error.response?.status === 403) {
        setError('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
      } else {
        setError('–°–µ—Ä–≤–µ—Ä API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
        loadDemoData();
      }
    } finally {
      setLoading(false);
    }
  }, [createAuthApi, logout]);

  const loadDemoData = () => {
    const demoAgents = [
      
    ];
    setAgents(demoAgents);
  };

  useEffect(() => {
    if (isAuthenticated) {
      fetchAgents();
    }
  }, [isAuthenticated, fetchAgents]);

  const handleDeleteAgent = async (agentId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞?')) {
      try {
        const authApi = createAuthApi();
        await authApi.delete(`/admin/agents/${agentId}`);
      } catch (error) {
        console.log('‚ùå API —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
      }
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ UI –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      setAgents(agents.filter(agent => agent.id !== agentId));
    }
  };

  const handleLogout = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
      logout();
    }
  };

  const getStatusBadge = (status) => {
    const statusMap = {
      'Active': { text: 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω', class: 'status-active' },
      'Inactive': { text: 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω', class: 'status-inactive' },
      'Maintenance': { text: 'üü° –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', class: 'status-maintenance' },
      'Online': { text: 'üü¢ –û–Ω–ª–∞–π–Ω', class: 'status-active' },
      'Offline': { text: 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω', class: 'status-inactive' },
      'Error': { text: 'üî¥ –û—à–∏–±–∫–∞', class: 'status-error' }
    };
    
    return statusMap[status] || { text: '‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', class: 'status-unknown' };
  };

  const filteredAgents = agents.filter(agent =>
    agent.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    agent.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
    agent.desc.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (agent.ip && agent.ip.includes(searchTerm))
  );

  if (loading) {
    return (
      <div className="admin-panel">
        <div className="loading-container">
          <div className="loading-spinner">‚è≥</div>
          <div className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-panel">
      {/* –ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é */}
      <div className="burger-menu">
        <button 
          className="burger-toggle"
          onClick={() => setShowBurgerMenu(!showBurgerMenu)}
        >
          ‚ò∞
        </button>
        <div className={`burger-dropdown ${showBurgerMenu ? 'visible' : ''}`}>
          <div className="burger-links">
            <a 
              href="/" 
              className="burger-link"
              onClick={() => setShowBurgerMenu(false)}
            >
              <span>üè†</span>
              –ì–ª–∞–≤–Ω–∞—è
            </a>
            <button 
              className="burger-link logout-btn"
              onClick={handleLogout}
            >
              <span>üö™</span>
              –í—ã–π—Ç–∏
            </button>
          </div>
          <div className="burger-contact">
            CheckPulse Admin<br />
            v1.0.0
          </div>
        </div>
      </div>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="admin-header">
        <h1 className="admin-title">üîê –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CheckPulse</h1>
        {error && (
          <div className="error-message">
            {error}
            <button 
              className="retry-btn"
              onClick={fetchAgents}
              style={{marginLeft: '10px', padding: '5px 10px'}}
            >
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
            </button>
          </div>
        )}
        <div className="admin-stats">
          <div className="stat-card">
            <div className="stat-value">{agents.length}</div>
            <div className="stat-label">–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">
              {agents.filter(a => a.status === 'Active' || a.status === 'Online').length}
            </div>
            <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">
              {agents.filter(a => a.status === 'Inactive' || a.status === 'Offline' || a.status === 'error').length}
            </div>
            <div className="stat-label">–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö</div>
          </div>
        </div>
      </div>

      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <div className="admin-controls">
        <div className="search-container">
          <input
            type="text"
            className="search-input"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, email, IP –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <div className="control-buttons">
          <button 
            className="logout-btn-header"
            onClick={handleLogout}
            title="–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
          >
            üö™ –í—ã–π—Ç–∏
          </button>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ */}
      <div className="agents-list">
        {filteredAgents.length === 0 ? (
          <div className="no-agents">
            <div className="no-agents-icon">ü§ñ</div>
            <div className="no-agents-text">–ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
            {searchTerm && (
              <div className="no-agents-hint">
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
              </div>
            )}
          </div>
        ) : (
          filteredAgents.map(agent => {
            const statusInfo = getStatusBadge(agent.status);
            return (
              <div key={agent.id} className="agent-card">
                <div className="agent-header">
                  <div className="agent-name">{agent.name}</div>
                  <div className={`status-badge ${statusInfo.class}`}>
                    {statusInfo.text}
                  </div>
                </div>
                
                <div className="agent-info">
                  <div className="info-row">
                    <span className="info-label">Email:</span>
                    <span className="info-value">{agent.email}</span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">IP –∞–¥—Ä–µ—Å:</span>
                    <span className="info-value">{agent.ip}</span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">–í–µ—Ä—Å–∏—è:</span>
                    <span className="info-value">{agent.version}</span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">–û–ø–∏—Å–∞–Ω–∏–µ:</span>
                    <span className="info-value">{agent.desc}</span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">–°–æ–∑–¥–∞–Ω:</span>
                    <span className="info-value">{agent.created}</span>
                  </div>
                  <div className="info-row">
                    <span className="info-label">–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</span>
                    <span className="info-value">{agent.lastActive}</span>
                  </div>
                </div>

                <div className="agent-actions">
                  <button 
                    className="delete-btn"
                    onClick={() => handleDeleteAgent(agent.id)}
                    title="–£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"
                  >
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>
            );
          })
        )}
      </div>

      {/* –°—á–µ—Ç—á–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤ */}
      <div className="agent-counter">
        <div className="counter-label">
          –ü–æ–∫–∞–∑–∞–Ω–æ: {filteredAgents.length} –∏–∑ {agents.length}
        </div>
      </div>
    </div>
  );
};

export default AdminPanel;